import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import GlobalOfflineManager from "@/components/GlobalOfflineManager";
import InstallPrompt from "@/components/pwa/InstallPrompt";
import NavBar from "@/components/layout/NavBar";
import Footer from "@/components/layout/Footer";
import ClerkSessionBridge from "@/components/auth/ClerkSessionBridge";
import { ClerkProvider } from "@clerk/nextjs";
import I18nProvider from '@/lib/I18nProvider';
import { cookies } from 'next/headers';
import { ThemeProvider } from '@/components/theme/ThemeProvider';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  let langCookie = 'en';
  let themeCookie: 'light' | 'dark' = 'light';
  try {
  const store = await cookies();
  const c = store.get?.('lang');
  const t = store.get?.('theme');
    if (c?.value) {
      langCookie = c.value.startsWith('or') ? 'or' : 'en';
    }
    if (t?.value === 'dark') themeCookie = 'dark';
  } catch {
    // ignore - cookies not available (edge cases)
  }
  return (
  <html lang={langCookie} className={themeCookie === 'dark' ? 'dark' : ''} data-theme={themeCookie}>
      <head>
        <script
          // Pre-hydration theme application & cookie/LS reconciliation
          dangerouslySetInnerHTML={{
            __html: `(()=>{try{const KEY='theme';let ls=localStorage.getItem(KEY);const m=document.cookie.match(/(?:^|; )theme=(dark|light)/);const cookieTheme=m?m[1]:null; if(!ls){ls=cookieTheme||(window.matchMedia('(prefers-color-scheme: dark)').matches?'dark':'light');}
              // If mismatch, prefer localStorage (user's most recent client setting) & update cookie
              if(ls && cookieTheme && ls!==cookieTheme){document.cookie='theme='+ls+'; path=/; max-age=31536000; samesite=lax';}
              if(ls!=='dark'&&ls!=='light'){ls='light';}
              if(ls==='dark'){document.documentElement.classList.add('dark');}else{document.documentElement.classList.remove('dark');}
              document.documentElement.setAttribute('data-theme', ls);
            }catch(e){}}
            )();`
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-background dark:bg-gray-950 text-gray-900 dark:text-gray-100 transition-colors`}
      >
        <ClerkProvider>
          <I18nProvider initialLang={langCookie}>
            <ThemeProvider initialTheme={themeCookie}>
              {/* Sync Clerk user to offline session */}
              <ClerkSessionBridge />
              {/* Initialize global offline/sync manager */}
              <GlobalOfflineManager />
              {/* PWA install prompt for desktop & mobile */}
              <InstallPrompt />
              <NavBar />
              <main className="min-h-[calc(100vh-3.5rem-3rem)]">{children}</main>
              <Footer />
            </ThemeProvider>
          </I18nProvider>
        </ClerkProvider>
      </body>
    </html>
  );
}
